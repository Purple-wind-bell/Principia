#pragma once

#include "numerics/lattices.hpp"

#include <algorithm>

#include "base/tags.hpp"
#include "boost/multiprecision/cpp_int.hpp"
#include "numerics/fixed_arrays.hpp"
#include "numerics/matrix_computations.hpp"
#include "numerics/matrix_views.hpp"
#include "numerics/unbounded_arrays.hpp"
#include "quantities/elementary_functions.hpp"
#include "quantities/named_quantities.hpp"

namespace principia {
namespace numerics {
namespace _lattices {
namespace internal {

using namespace boost::multiprecision;
using namespace principia::base::_tags;
using namespace principia::numerics::_fixed_arrays;
using namespace principia::numerics::_matrix_computations;
using namespace principia::numerics::_matrix_views;
using namespace principia::numerics::_unbounded_arrays;
using namespace principia::quantities::_elementary_functions;
using namespace principia::quantities::_named_quantities;

// In the terminology of [NS09], our vectors are in columns, so |d| is |columns|
// and |n| is |rows|.
template<typename Matrix>
struct GramGenerator;

template<typename Scalar>
struct GramGenerator<UnboundedMatrix<Scalar>> {
  using Result = UnboundedMatrix<Square<Scalar>>;
  static Result Uninitialized(UnboundedMatrix<Scalar> const& m);
};

template<typename Scalar, int rows, int columns>
struct GramGenerator<FixedMatrix<Scalar, rows, columns>> {
  using Result = FixedMatrix<Square<Scalar>, columns, columns>;
  static Result Uninitialized(FixedMatrix<Scalar, rows, columns> const& m);
};

template<typename Matrix>
struct LenstraLenstraLov√°szGenerator;

template<typename Scalar>
struct LenstraLenstraLov√°szGenerator<UnboundedMatrix<Scalar>> {
  using Vector = UnboundedVector<Scalar>;
};

template<typename Scalar, int rows, int columns>
struct LenstraLenstraLov√°szGenerator<
    FixedMatrix<Scalar, rows, columns>> {
  using Vector = FixedVector<Scalar, rows>;
};

template<typename Matrix>
struct Nguy·ªÖnStehleÃÅGenerator;

template<typename Scalar>
struct Nguy·ªÖnStehleÃÅGenerator<UnboundedMatrix<Scalar>> {
  using R = UnboundedMatrix<Scalar>;
  static R Uninitialized(UnboundedMatrix<Scalar> const& m);
};

template<>
struct Nguy·ªÖnStehleÃÅGenerator<UnboundedMatrix<cpp_int>> {
  using R = UnboundedMatrix<double>;
  static R Uninitialized(UnboundedMatrix<cpp_int> const& m);
};

template<typename Scalar, int rows, int columns>
struct Nguy·ªÖnStehleÃÅGenerator<FixedMatrix<Scalar, rows, columns>> {
  using R = FixedMatrix<Scalar, rows, columns>;
  static R Uninitialized(FixedMatrix<Scalar, rows, columns> const& m);
};

template<int rows, int columns>
struct Nguy·ªÖnStehleÃÅGenerator<FixedMatrix<cpp_int, rows, columns>> {
  using R = FixedMatrix<cpp_int, rows, columns>;
  static R Uninitialized(FixedMatrix<cpp_int, rows, columns> const& m);
};


template<typename Scalar>
auto GramGenerator<UnboundedMatrix<Scalar>>::Uninitialized(
UnboundedMatrix<Scalar> const& m) -> Result {
  return Result(m.rows(), m.rows(), uninitialized);
}

template<typename Scalar, int rows, int columns>
auto GramGenerator<FixedMatrix<Scalar, rows, columns>>::Uninitialized(
FixedMatrix<Scalar, rows, columns> const& m) -> Result {
  return Result(uninitialized);
}

template<typename Scalar>
auto Nguy·ªÖnStehleÃÅGenerator<UnboundedMatrix<Scalar>>::Uninitialized(
    UnboundedMatrix<Scalar> const& m) -> R {
  return R(m.rows(), m.columns(), uninitialized);
}

auto Nguy·ªÖnStehleÃÅGenerator<UnboundedMatrix<cpp_int>>::Uninitialized(
    UnboundedMatrix<cpp_int> const& m) -> R {
  return R(m.rows(), m.columns(), uninitialized);
}

template<typename Scalar, int rows, int columns>
auto Nguy·ªÖnStehleÃÅGenerator<FixedMatrix<Scalar, rows, columns>>::Uninitialized(
    FixedMatrix<Scalar, rows, columns> const& m) -> R {
  return R(m.rows(), m.columns(), uninitialized);
}

template<int rows, int columns>
auto Nguy·ªÖnStehleÃÅGenerator<FixedMatrix<cpp_int, rows, columns>>::Uninitialized(
    FixedMatrix<cpp_int, rows, columns> const& m) -> R {
  return R(m.rows(), m.columns(), uninitialized);
}


template<typename Matrix>
typename GramGenerator<Matrix>::Result Gram(Matrix const& L) {
  using G = GramGenerator<Matrix>;
  std::int64_t const rows = L.rows();
  std::int64_t const columns = L.columns();
  auto result = G::Uninitialized(L);
  for (std::int64_t i = 0; i < columns; ++i) {
    auto const b·µ¢ = ColumnView{.matrix = L,
                               .first_row = 0,
                               .last_row = rows - 1,
                               .column = i};
    for (std::int64_t j = 0; j <= i; ++j) {
      auto const b‚±º = ColumnView{.matrix = L,
                                 .first_row = 0,
                                 .last_row = rows - 1,
                                 .column = j};
      auto const b·µ¢b‚±º = b·µ¢ * b‚±º;
      result(i, j) = b·µ¢b‚±º;
      result(j, i) = b·µ¢b‚±º;
    }
  }
  return result;
}

// This implements [HPS], theorem 7.71, figure 7.8.  Note that figures 7.9 and
// 7.10 are supposedly more efficient, but they are significantly more
// complicated.  If performance is an issue, we should look into recent
// improvements of LLL.
template<typename Matrix>
  requires two_dimensional<Matrix>
Matrix LenstraLenstraLov√°sz(Matrix const& L) {
  using G = LenstraLenstraLov√°szGenerator<Matrix>;
  auto const n = L.columns();
  auto const m = L.rows();
  auto v = L;
  for (int k = 1; k < n;) {
    auto qr = UnitriangularGramSchmidt(v);
    auto v‚Çñ = ColumnView{.matrix = v,
                        .first_row = 0,
                        .last_row = m - 1,
                        .column = k};
    for (int j = k - 1; j >= 0; --j) {
      auto const Œº‚Çñ‚±º = qr.R(j, k);
      auto v‚±º = ColumnView{.matrix = v,
                           .first_row = 0,
                           .last_row = m - 1,
                           .column = j};
      auto const round_Œº‚Çñ‚±º = Round(Œº‚Çñ‚±º);
      if (round_Œº‚Çñ‚±º != 0) {
        v‚Çñ -= round_Œº‚Çñ‚±º * typename G::Vector(v‚±º);
        qr = UnitriangularGramSchmidt(v);
      }
    }
    auto const Œº‚Çñ‚Çñ‚Çã‚ÇÅ = qr.R(k - 1, k);
    auto vêåü‚Çñ = ColumnView{.matrix = qr.Q,
                         .first_row = 0,
                         .last_row = m - 1,
                         .column = k};
    auto vêåü‚Çñ‚Çã‚ÇÅ = ColumnView{.matrix = qr.Q,
                           .first_row = 0,
                           .last_row = m - 1,
                           .column = k - 1};
    if (vêåü‚Çñ.Norm¬≤() >= (0.75 - Pow<2>(Œº‚Çñ‚Çñ‚Çã‚ÇÅ)) * vêåü‚Çñ‚Çã‚ÇÅ.Norm¬≤()) {
      ++k;
    } else {
      auto v‚Çñ‚Çã‚ÇÅ = ColumnView{.matrix = v,
                            .first_row = 0,
                            .last_row = m - 1,
                            .column = k - 1};
      SwapColumns(v‚Çñ‚Çã‚ÇÅ, v‚Çñ);
      k = std::max(k - 1, 1);
    }
  }
  return v;
}

template<typename Matrix>
  requires two_dimensional<Matrix>
Matrix Nguy·ªÖnStehleÃÅ(Matrix const& L) {
  using Gen = Nguy·ªÖnStehleÃÅGenerator<Matrix>;
  auto b = L;
  std::int64_t const d = b.columns();

  //[NS09] figure 7.
  double const ·∫ü = 0.75;
  double const Œ∑ = 0.55;
  //[NS09] figure 9.
  // Step 1.
  auto const G = Gram(b);
  // Step 2.
  double const ·∫ü = (·∫ü + 1) / 2;
  auto const b‚ÇÄ = ColumnView{.matrix = b,
                             .first_row = 0,
                             .last_row = b.rows(),
                             .column = 0};
  typename Gen::R r = Gen::Uninitialized(b);
  r(0, 0) = static_cast<typename Gen::R::ElementType>(b‚ÇÄ.Norm¬≤());
  std::int64_t Œ∫ = 1;
  std::int64_t Œ∂ = -1;
  while (Œ∫ < d) {
    // Step 3.
    SizeReduce(b, Œ∂ + 1, Œ∫);
    // Step 4.
    //TODO(phl)high index probably useless
    std::int64_t Œ∫ π = Œ∫;
    while (Œ∫ >= Œ∂ + 2 &&  ·∫ü * r(Œ∫ - 1, Œ∫ - 1) >= s(Œ∫ - 1)) {
      --Œ∫;
    }
    // Step 5.
    for (std::int64_t i = Œ∂ + 1; i < Œ∫ - 1; ++i) {
      Œº(Œ∫, i) = Œº(Œ∫ π, i);
      r(Œ∫, i) = r(Œ∫ π, i);
    }
    r(Œ∫, Œ∫) = s(Œ∫);
    // Step 6.
    Insert(b, Œ∫ π, Œ∫, G);
    // Step 7.
    auto const bŒ∫ = ColumnView{.matrix = b,
                               .first_row = 0,
                               .last_row = b.rows(),
                               .column = Œ∫};
    if (bŒ∫ == zero) {
      ++Œ∂;
    }
    // Step 8.
    Œ∫ = std::max(Œ∂ + 2, Œ∫ + 1);
  }

  return b;
}

}  // namespace internal
}  // namespace _lattices
}  // namespace numerics
}  // namespace principia
